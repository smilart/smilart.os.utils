#!/bin/bash

#Set debug mode:
#set -vx

#exist dialog?
dialog --clear;
if [[ $? != 0 ]];then
  echo -e "\E[31mERROR: Cannot run 'dialog'.">&2;tput sgr0;
  exit 1;
fi;

PATH_SYSTEM_NETWORK="/etc/systemd/network";
PATH_DNS_HOST="/etc/smilart/dns-host";
NETWORK_INSTALLED="/etc/smilart/network_installed";

#**************log ERROR************************#
LOG_ERROR[1]="ERROR: Not checked interface.";
LOG_ERROR[2]="ERROR: Found symbol '_' in fields.";
LOG_ERROR[3]="ERROR: Field 'Mask' is'nt valid.";
LOG_ERROR[4]="ERROR: Hostname is'nt valid.";
LOG_ERROR[5]="ERROR: Cannot change hostname.";
LOG_ERROR[6]="ERROR: Cannot connect to local etcd.";
LOG_ERROR[7]="ERROR: This machine is a cluster.";
LOG_ERROR[8]="ERROR: Cannot change /etc/hosts.";
LOG_ERROR[9]="ERROR: Hostname to server not changed.";
LOG_ERROR[10]="ERROR: Hostname can not be 'localhost'.";
LOG_ERROR[11]="ERROR: Cannot erase /etc/hosts.";
#********Genetate tempfiles from dialog*********#
tempfile() {
    tempprefix=$(basename "$0");
    mktemp /tmp/${tempprefix}.XXXXXX;
}

#Color sheme
TMP_DIALOG_WARN=$(tempfile)
TMP_DIALOG_MENU=$(tempfile)
TMP_DIALOG_ERROR=$(tempfile)

echo "
dialog_color = (BLACK,WHITE,ON)
title_color = (YELLOW,WHITE,ON)
" > ${TMP_DIALOG_WARN}

echo "
bindkey formbox   TAB  form_next
bindkey formfield TAB  form_next
bindkey formfield BTAB form_prev
bindkey formbox   BTAB form_prev
" > ${TMP_DIALOG_MENU};

echo "
dialog_color = (BLACK,WHITE,OFF)
title_color = (RED,WHITE,ON)
" > ${TMP_DIALOG_ERROR}

# Function at break script
run_at_break(){
  sleep 1;
  DIALOGRC="${TMP_DIALOG_WARN}" \
    dialog --ok-label "OK" \
           --msgbox "\nWARN: Network is not configured." 10 50;
  rm -f ${TMP_DIALOG_MENU} ${TMP_DIALOG_ERROR} ${TMP_DIALOG_WARN};
  exit 1;
}

# Function at exit script
run_at_exit(){
  rm -f ${TMP_DIALOG_MENU} ${TMP_DIALOG_ERROR} ${TMP_DIALOG_WARN}
  exit 0;
}

# Function remove old configure in /etc/hosts
erase_old_hosts(){
  cp /etc/hosts /etc/hosts.old > /dev/null 2>&1;
  if [ $? -ne 0 ];then
    error_func "${LOG_ERROR[8]}";
    exit 1;
  fi;
  sed '/\#Smilart\ configure/,/\#End\ smilart\ configure/d' /etc/hosts.old > /etc/hosts;
  if [ $? -ne 0 ];then
    error_func "${LOG_ERROR[11]}";
    exit 1;
  fi;
}

trap 'run_at_break' SIGHUP SIGINT SIGTERM
#***********************************************#

# echo ERROR to dialog
# error_func <text>
error_func() {
  DIALOGRC="${TMP_DIALOG_ERROR}" \
    dialog --msgbox "\n$1" 10 50
}


# valid_ip_func <ip> <name field>
# valid_ip_func 192.168.1.1 Ip
function valid_ip_func() {
  if ! [[ $1 =~ ^(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{2}|[0-9])(\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{2}|[0-9])){3}$ ]]; then
    error_func "ERROR: Field '$2' is'nt valid.";
    continue
  fi;
}

# field_not_empty_func <field> <field name>
# field_not_empty_func $FORM_IP
function field_not_empty_func() {
if [[ -z $1 ]];then
  error_func "ERROR: Empty field '$2'.";
  continue
fi;
}

#translate netmask to cidr
# mask2cidr_func <mask>
# mask2cidr_func 255.255.254.0
function mask2cidr_func() {
  local nbits=0;
  local IFS=.;
  local dec='';
  for dec in $1 ; do
      case $dec in
          255) let nbits+=8;;
          254) let nbits+=7;;
          252) let nbits+=6;;
          248) let nbits+=5;;
          240) let nbits+=4;;
          224) let nbits+=3;;
          192) let nbits+=2;;
          128) let nbits+=1;;
          0);;
          *) return 1
      esac
  done
  echo "/$nbits"
}

# test_hostname_func <hostname>
function test_hostname_func() {
if ! [[ "$1" =~ ^[a-z][a-z0-9-]{0,}$ ]];then
  error_func "${LOG_ERROR[4]}";
  continue
fi
if [[ "$1" == "localhost" ]];then
  error_func "${LOG_ERROR[10]}";
  continue
fi
}

#***************Role to cluster******************#

#While. Reconnect to local etcd 
i=0;
while [ $i -lt 3 ]; do
    i=$[$i+1];
    etcdctl member list >/dev/null 2>&1;
    if [ $? -ne 0 ];then
        echo -e "\E[33mWARN: Local etcd service is available. Reconnect after 3 seconds..";tput sgr0;
        sleep 3;
        continue;
    else
        break
    fi;
done
if [ $i -eq 3 ];then
    error_func "${LOG_ERROR[6]}";
    exit 1;
fi;
unset i;

if [[ `etcdctl member list | wc -l` != '1' ]];then
    error_func "${LOG_ERROR[7]}";
    exit 1;
fi;



#****************CONFIGURE INTERFACE**************#
EXIT_FORM="0";
while [[ ${EXIT_FORM} == "0" ]];do
  # search current interfaces
  inet=`ls /sys/class/net | grep -v "\`ls /sys/devices/virtual/net\`"`;

  # generate menu options
  MENU_OPTIONS='';
  COUNT=0;
  for i in $inet
  do
    inet[$COUNT]=$i;
    COUNT=$[COUNT+1];
    if [[ `cat /sys/class/net/$i/operstate` == "up" ]];then
      CONNECT_i="$i Connect";
    else
      CONNECT_i="$i -";
    fi;
    if [[ ${MENU_OPTIONS} == '' ]];then
      MENU_OPTIONS="${CONNECT_i} on ";
    else
      MENU_OPTIONS="${MENU_OPTIONS} ${CONNECT_i} off ";
    fi;
  done

  # Store data to variable
  exec 3>&1
  FORM_INTERFACE=$(DIALOGRC="${TMP_DIALOG_MENU}" dialog --clear \
    --ok-label "Next" \
    --title "Smilart Operating System" \
    --radiolist "\nSelect the network interface to configure" \
      10 50 4 \
      ${MENU_OPTIONS} \
      2>&1 1>&3)
  DIALOG_RETURN_VALUE=$?
  exec 3>&-

  if [[ ${DIALOG_RETURN_VALUE} == 1 || ${DIALOG_RETURN_VALUE} == 255 ]]; then 
    run_at_break; 
  fi;

  #Valid interface?
  if [[ -z "${FORM_INTERFACE}" ]]; then
     error_func "${LOG_ERROR[1]}";
     continue
  else
     #go next dialog
     EXIT_FORM="1";
  fi

done;

#**************CONFIGURE NETWORK**************#
EXIT_FORM="0";

# Writing old configure
if [[ `hostname` == 'localhost' ]];then
  FORM_HOSTNAME='';
else
  FORM_HOSTNAME="`hostname`";
fi

if [ -e "${PATH_SYSTEM_NETWORK}/${FORM_INTERFACE}.network" ];then
  CONFIGURE_TO_FILE=`cat ${PATH_SYSTEM_NETWORK}/${FORM_INTERFACE}.network`;
  FORM_IP=`echo "${CONFIGURE_TO_FILE}" | grep 'Address' | sed s#"Address="##g | awk -F '/' ' {print $1} '`;
  FORM_MASK=/`echo "${CONFIGURE_TO_FILE}" | grep 'Address' | sed s#"Address="##g | awk -F '/' ' {print $2} '`;
  FORM_GATEWAY=`echo "${CONFIGURE_TO_FILE}" | grep 'Gateway' | sed s#"Gateway="##g`;
  FORM_DNS=`cat "${PATH_DNS_HOST}"`;
  if [ -z ${FORM_DNS} ];then
      FORM_DNS='8.8.8.8';
  fi;
else
  FORM_IP='';
  FORM_MASK='';
  FORM_GATEWAY='';
  FORM_DNS='';
fi

while [[ ${EXIT_FORM} == "0" ]];do

  if [ -f ${NETWORK_INSTALLED} ];then
      exec 3>&1
      # Store data to $DIALOG_STRING variable
      DIALOG_STRING=$(DIALOGRC="${TMP_DIALOG_MENU}" dialog --clear \
        --ok-label "OK" \
        --title "Smilart Operating System" \
        --form "\nEnter network settings \n \n Hostname:          ${FORM_HOSTNAME}\n" \
       0 0 0 \
       "Ip:              " 1 1 "${FORM_IP}"           1 20 30 0 \
       "Mask:            " 3 1 "${FORM_MASK}"         3 20 30 0 \
       "Gateway:         " 5 1 "${FORM_GATEWAY}"      5 20 30 0 \
       "DNS:             " 7 1 "${FORM_DNS}"          7 20 30 0 \
       2>&1 1>&3)
      DIALOG_RETURN_VALUE=$?
      exec 3>&-
      #one field if empty
      #DIALOG_STRING="_"+$DIALOG_STRING;
  else
      exec 3>&1
      # Store data to $DIALOG_STRING variable
      DIALOG_STRING=$(DIALOGRC="${TMP_DIALOG_MENU}" dialog --clear \
      --ok-label "OK" \
      --title "Smilart Operating System" \
      --form "\nEnter network settings" \
      0 0 0 \
      "Hostname:        " 1 1 "${FORM_HOSTNAME}"     1 20 30 0 \
      "Ip:              " 3 1 "${FORM_IP}"           3 20 30 0 \
      "Mask:            " 5 1 "${FORM_MASK}"         5 20 30 0 \
      "Gateway:         " 7 1 "${FORM_GATEWAY}"      7 20 30 0 \
      "DNS:             " 9 1 "${FORM_DNS}"          9 20 30 0 \
       2>&1 1>&3)
      DIALOG_RETURN_VALUE=$?
      exec 3>&-
  fi;

  if [[ ${DIALOG_RETURN_VALUE} == 1 || ${DIALOG_RETURN_VALUE} == 255 ]]; then
    run_at_break;
  fi;

  # exist "_" in form?
  if [[ -n `echo "${DIALOG_STRING}" | grep "_"` ]];then
        error_func "${LOG_ERROR[2]}";
        continue
  fi;
  #symbols "\n" to "_"
  DIALOG_STRING=`echo "${DIALOG_STRING}" | tr "\n" "_"`

  # convert DIALOG_STRING to variables
  OIFS=$IFS
  IFS='_'
  DIALOG_STRING=(${DIALOG_STRING})
  if [ -f ${PATH_DNS_HOST} ];then
      #FORM_HOSTNAME='';
      FORM_IP="${DIALOG_STRING[0]}";
      FORM_MASK="${DIALOG_STRING[1]}";
      FORM_GATEWAY="${DIALOG_STRING[2]}";
      FORM_DNS="${DIALOG_STRING[3]}";
  else
      FORM_HOSTNAME="${DIALOG_STRING[0]}";
      FORM_IP="${DIALOG_STRING[1]}";
      FORM_MASK="${DIALOG_STRING[2]}";
      FORM_GATEWAY="${DIALOG_STRING[3]}";
      FORM_DNS="${DIALOG_STRING[4]}";
  fi;
  IFS=$OIFS

  #*********Valid ip*********#
  # empty field?
  field_not_empty_func "${FORM_IP}" Ip;

  # It is ip format?
  valid_ip_func "${FORM_IP}" Ip;

  #*********Valid mask*********#
  # empty field?
  field_not_empty_func "${FORM_MASK}" Mask;

  # Valid mask?
  if ! [[ ${FORM_MASK} =~ ^[\/][0-3]{,1}[0-9]$ && ${FORM_MASK:1} -le 32 ]];then
    valid_ip_func "${FORM_MASK}" Mask;
    OIFS=$IFS
    IFS="."
    BIN_MASK=""
    for i in ${FORM_MASK[@]};do
      if [[ $i > 255 ]];then 
        error_func "${LOG_ERROR[3]}";
        continue
      fi;
      BIN_MASK+=$(printf "%08d" $(echo "ibase = 10; obase = 2 ; $i" | bc));
    done
    IFS=$OIFS;
    if [[ ${BIN_MASK} =~ (1*0+1) ]];then
      error_func "${LOG_ERROR[3]}";
      continue
    fi;
    FORM_MASK=`mask2cidr_func "${FORM_MASK}"`;
  fi;

  #*********Valid gateway*********#
  if [[ -n "$FORM_GATEWAY" ]]; then
    # It is ip format?
    valid_ip_func "${FORM_GATEWAY}" Gateway;
  fi;
  
  

  #*********Valid dns*********#
  # empty field?
  field_not_empty_func "${FORM_DNS}" DNS;
    
  if [[ -n "${FORM_DNS}" ]]; then
    # It is ip format?
    valid_ip_func "${FORM_DNS}" DNS;
    if [[ "${FORM_DNS}" =~ ^'127' ]];then
        error_func "Dns address can not be 'localhost'.";
        continue
    fi;
  fi;

  #*********Valid hostname*********#
  # empty field?
  field_not_empty_func "${FORM_HOSTNAME}" Hostname;

  #valid hostname?
  test_hostname_func "${FORM_HOSTNAME}";

  EXIT_FORM="1";
done;

#*******************Save to files****************#
#Save interface

#Create config network
echo "
[Match]
Name=${FORM_INTERFACE}

[Network]
Address=${FORM_IP}${FORM_MASK}
`if [[ -n ${FORM_GATEWAY} ]];then echo "Gateway=${FORM_GATEWAY}"; fi`
DNS=${FORM_DNS}
Domains=smilart.local
" > ${PATH_SYSTEM_NETWORK}/${FORM_INTERFACE}.network;

# Delete old config interface
while ip -f inet addr del dev ${FORM_INTERFACE} >/dev/null 2>&1;do 
sleep 0.1;
done;

# Add ip of hostname to /etc/hosts

erase_old_hosts
echo "#Smilart configure
# WARNING!!! This text blok only changes automatically.
${FORM_IP}    ${FORM_HOSTNAME}
#
#End smilart configure" >> /etc/hosts;


# Restart interface
sudo systemctl restart systemd-networkd;

#Set hostname
sudo hostnamectl set-hostname "${FORM_HOSTNAME}";
if [[ $? != 0 ]];then
    error_func "${LOG_ERROR[9]}";
    exit 1;
fi;

#Save dns in temporary file to configure dns server
mkdir -p /etc/smilart > /dev/null 2>&1;
if [[ -n ${FORM_DNS} ]];then
  echo "${FORM_DNS}" > ${PATH_DNS_HOST};
fi;

echo "${FORM_INTERFACE}" > ${NETWORK_INSTALLED};
clear;

run_at_exit;